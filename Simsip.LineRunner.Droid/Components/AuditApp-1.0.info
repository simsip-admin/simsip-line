{"Name":"AuditApp","Id":659,"Alias":"AuditApp","Description":"This application is similar to iRate on the component store. Ask users to review your application after they have used it for awhile.\n\n## Types of prompts ##\n\n1. A prompt that will take the user to the app store, remind them later, or don\u0027t remind\n2. A prompt that will ask the user how the app experience is. If they have a positive experience it will take them \nto the app store. If they have a negative experience it will open a suggestion prompt where they can enter comments about the experience.\n\nAll of the default behavior is customizable and\nyou can specify the number of uses and/or the number of days to wait to display the prompt.\n\nThis library uses the package name to find your app on the store. So the play store will show a blank page until your app is on the store.\n\nYou must follow 2 steps.\n\nPut the setup code in your class that extends Application and in the OnCreate(..) override.\n\n    using AuditApp.Common\n    ...\n    //This is in your Application class\n    public override void OnCreate(Bundle bundle)\n    {\n    \tAndroidPlaystoreAudit.Instance.UsesUntilPrompt = 5;\n    \tAndroidPlaystoreAudit.Instance.TimeUntilPrompt = new TimeSpan(0, 1, 0);\n    }\n\nNext, Put the `Run(Activity activity)` method in the activity where you want to show the user the prompt.\n\n    using AuditApp.Common\n    ...\n    //This is in your activity\n    public override void OnCreate(Bundle bundle)\n    {\n    \tAndroidPlaystoreAudit.Instance.Run(this);\n    }\n\nThe other class `AndroidInterceptAudit` is shown in the samples and \u0027Getting Started\u0027 if you want users to give you feedback outside\nof the app store and inside your application.\n\n## Manually Show Prompt \u0026 Open App Store##\nYou can also manually show the prompt whenever you\u0027d like by calling\n`ShowPrompt(Activity activity)`\n\nYou can also open your application page on the Google Play Store by calling\n`AndroidAuditUtils.OpenAppStore(Activity activity)` \n\n## Localization ##\nThe default language is English but there is a convenient `Localize(...)` method to provide your own strings or translations.\n\nSee the samples and the \u0027Getting Started\u0027 for the other many types of configuration you can perform.\n\n* Xamarin.iOS version coming soon\n\nscreenshots taken with placeit.net\n\n\u003ch2\u003e Release Notes \u003c/h2\u003e\n\u003ch3\u003e Version 1.0 \u003c/h3\u003e\nInitial Release","Version":"1.0","Summary":"Prompts users to review your app. Many options and two different customizable prompts.","QuickStart":"This will guide you through the two types of prompts you can show the user. Please check out the \nsamples to see these as working examples.\n\n## Playstore Audit Example ##\nThe first example is called a \u0027Playstore\u0027 audit. \nIt will show a prompt with 3 options and if they select \"Review App\" it will take them to the app store.\nYou can configure the amount of time to wait and usages before the prompt is displayed.\n\nput all of the initialization code in the OnCreate of your class that extends Application. \nPut the `Run(this)` method in one activity that you want to show the prompt.\n\n    using AuditApp.Common;\n    ...\n    //In your class that extends Application. Please see the default values in the intellisense for each property on the class.\n    public override void OnCreate()\n    {\n    \t//You\u0027ll have to open, kill the app, then open it again to see the prompt since we are setting \u0027UsesUntilPrompt\u0027 = 2\n    \tAndroidPlaystoreAudit.Instance.TimeUntilPrompt = new TimeSpan(0, 0, 10);\n    \tAndroidPlaystoreAudit.Instance.UsesUntilPrompt = 2;\n    \tAndroidPlaystoreAudit.Instance.RemindLaterButtonText = \"Remind me in 30 seconds\";\n\t\tAndroidPlaystoreAudit.Instance.RemindLaterTimeToWait = new TimeSpan (0, 0, 30);\n    }\n\nNow put this in your activity where you want to show the prompt.\n\n    //In your Activity\n    public override void OnCreate(Bundle bundle)\n    {\n    \tAndroidPlaystoreAudit.Instance.AppStoreNotFound += (sender, e) =\u003e {\n\t\t\tToast.MakeText(this, \"Cannot find appstore\", ToastLength.Long).Show();\n\t\t};\n    \tAndroidPlaystoreAudit.Instance.Run(this);\n    }\n\n##  Intercept Audit Example  ##\nThe next example is called an \u0027Intercept\u0027 audit. It will show a prompt with 4 buttons. One button\nwill be for a positive experience and will direct them to the app store. The negative experience button\nwill open another prompt where the user can enter suggestions for improvement. The last two buttons are for\nremind me later and don\u0027t remind.\n\n    using AuditApp.Common;\n\t...\n\t\n\t//In your class that extends Application.\n\tpublic override void OnCreate()\n\t{\n\t\t//You can also hide the User Identifier text field if you already know who the user is by\n\t\t//Setting the property \u0027ShowUserIdentifier\u0027 to \u0027false\u0027\n\t\tAuditApp.Android.AndroidInterceptAudit.Instance.UserIdentifierHint = \"Enter User Id\";\n\t\tAuditApp.Android.AndroidInterceptAudit.Instance.UsesUntilPrompt = 1;\n\t\tAuditApp.Android.AndroidInterceptAudit.Instance.TimeUntilPrompt = new TimeSpan (0, 0, 0);\n\t\tAuditApp.Android.AndroidInterceptAudit.Instance.RemindLaterTimeToWait = new TimeSpan (0, 0, 10);\n\t}\n\nIn your activity where you want to show the prompt.\n\n    //In your activity that you want to show the prompt.\n\tpublic override void OnCreate (Bundle bundle)\n\t{\n\t\tAuditApp.Android.AndroidInterceptAudit.Instance.UserResponded += (object sender, UserSuggestionEventArgs e) =\u003e {\n\t\t\t//Send to web server or save to file\n\t\t\tToast.MakeText(this, e.UserResponse, ToastLength.Long).Show();\n\t\t};\n\t\tAndroid.AndroidInterceptAudit.Instance.Run (this);\n\t}\n\nThere are many more ways to customize the experience such as localization and settings styles for the prompts. You can also return bool\u0027s on whether to perform the default action when the user responds.\nSee the InterceptCustomAndLocalized project in the samples or the documentation on how to perform these functions.\n\nMake sure to put all of your initialization code and event handler hook-ups before calling\n\n\r\n    ...Instance.Run(Activity activity);\r\n\r\n\r\n## Manually Show Prompt \u0026 Open App Store##\r\nYou can also manually show the prompt whenever you\u0027d like by calling\r\n`ShowPrompt(Activity activity)`\r\n\r\nYou can also open your application page on the Google Play Store by calling\r\n`AndroidAuditUtils.OpenAppStore(Activity activity)` \r\n\r\n## Localization ##\r\nThe default language is English but there is a convenient `Localize(...)` method to provide your own strings or translations.\r\n\r\nSee the samples and the \u0027Getting Started\u0027 for the other many types of configuration you can perform.\r\n\r\n## Review Each Version ##\r\nYou can ask the user to review each version of your application by setting `...Instance.IgnoreAppVersion = true`. This basically resets any responses by the user when they download a new version of the application and the counts are reset.\r\n\r\n**Note: The default IgnoreAppVersion is false and will only prompt once for the lifetime of the application**\r\n\r\n","Hash":"966add014739c88fbf73e93f36bfeb37","TargetPlatforms":["android"],"TrialHash":null}