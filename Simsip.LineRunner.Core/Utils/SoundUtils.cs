using Cocos2D;
using CocosDenshion;
using Simsip.LineRunner.GameFramework;
using System;


namespace Simsip.LineRunner.Utils
{
    public class SoundUtils
    {
        #region Sound effects

        public const int INVALID_SOUND_EFFECT_ID = -1;

        public static void PlayBackgroundTrack(string trackFileName)
        {
            try
            {
                // Short circuit if sounds have been turned off
                if (!UserDefaults.SharedUserDefault.GetBoolForKey(
                    GameConstants.USER_DEFAULT_KEY_MUSIC,
                    GameConstants.USER_DEFAULT_INITIAL_MUSIC)
)
                {
                    return;
                }

                if (CCSimpleAudioEngine.SharedEngine.IsBackgroundMusicPlaying())
                {
                    CCSimpleAudioEngine.SharedEngine.StopBackgroundMusic();
                }

                CCSimpleAudioEngine.SharedEngine.PreloadBackgroundMusic(FormatSoundFilePath(trackFileName));
                CCSimpleAudioEngine.SharedEngine.PlayBackgroundMusic(FormatSoundFilePath(trackFileName), true);  // Loop
            }
            catch (Exception ex)
            {
                CCLog.Log("Exception attempting to play background track: " + ex);
            }
        }

        public static void PreloadSoundEffect(string sound)
        {
            CCSimpleAudioEngine.SharedEngine.PreloadEffect(FormatSoundFilePath(sound));
        }

        /// <summary>
        /// Plays a preloaded sound effect if sound effects are turned on.
        /// </summary>
        /// <param name="soundEffect">The string of the sound effect to play.
        /// Note, this is the name of the sound effect only without path info (e.g., grunt1.wav or grunt1.mp3)</param>
        /// <returns>If sound effects are turned on, then the sound effect id as generated by the CCSimpleAudioEngine.
        /// Otherwise, SoundUtils.INVALID_SOUND_EFFECT_ID is returned.</returns>
        public static int PlaySoundEffect(string soundEffect)
        {
            if (UserDefaults.SharedUserDefault.GetBoolForKey(
                GameConstants.USER_DEFAULT_KEY_SOUND,
                GameConstants.USER_DEFAULT_INITIAL_SOUND))
            {
                return CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath(soundEffect));
            }

            return INVALID_SOUND_EFFECT_ID;
        }

        public static void StopSoundEffect(int soundEffectID)
        {
            if (soundEffectID != INVALID_SOUND_EFFECT_ID)
            {
                CCSimpleAudioEngine.SharedEngine.StopEffect(soundEffectID);
            }
        }

        public static void UnloadSoundEffect(string sound)
        {
            CCSimpleAudioEngine.SharedEngine.UnloadEffect(FormatSoundFilePath(sound));
        }

        private static string FormatSoundFilePath(string sound)
        {
            string sndfile = System.IO.Path.Combine("Sounds", sound);
            if (sndfile.IndexOf(".mp3") > -1)
            {
                sndfile = sndfile.Substring(0, sndfile.IndexOf(".mp3"));
            }
            else if (sndfile.IndexOf(".wav") > -1)
            {
                sndfile = sndfile.Substring(0, sndfile.IndexOf(".wav"));
            }
            return sndfile;
        }

        #endregion
    }
}